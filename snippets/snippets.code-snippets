{
    "useState Hook Template": {
      "prefix": "!us",
      "body": ["const [value, setValue] = useState(initialState);"],
      "description": "useState Hook Template"
    },
    "useEffect Hook Template": {
      "prefix": "!ue",
      "body": [
        "useEffect((args) => {",
        " //feature to change",
        "}, [dependencies]);"
      ],
      "description": "useEffect Hook Template"
    },
    "useContext Hook Template": {
      "prefix": "!uc",
      "body": ["const value = useContext(YourContext);"],
      "description": "useContext Hook Template"
    },
    "useReducer Hook Template": {
      "prefix": "!ur",
      "body": [
        "const [state, dispatch] = useReducer(reducer, initialArg, init?);"
      ],
      "description": "useReducer Hook Template"
    },
    "useCallback Hook Template": {
      "prefix": "!ucall",
      "body": [
        "const memoizedCallback = useCallback(",
        " () => {",
        "   doSomething(a, b);",
        " }, [a, b]",
        ");"
      ],
      "description": "useCallback Hook Template"
    },
    "useMemo Hook Template": {
      "prefix": "!um",
      "body": ["const cachedValue = useMemo(calculateValue, dependencies)"],
      "description": "useMemo Hook Template"
    },
    "useRef Hook Template": {
      "prefix": "!uref",
      "body": ["const refContainer = useRef(initialValue);"],
      "description": "useRef Hook Template"
    },
    "useImperativeHandle Hook Template": {
      "prefix": "!uimp",
      "body": [
        "useImperativeHandle(ref, () => {",
        " return {",
        "   // your methods",
        " };",
        "}, [dependencies]);"
      ],
      "description": "useImperativeHandle Hook Template"
    },
    "useLayoutEffect Hook Template": {
      "prefix": "!ulay",
      "body": ["useLayoutEffect(setup, dependencies?);"],
      "description": "useLayoutEffect Hook Template"
    },
    "useDebugValue Hook Template": {
      "prefix": "!udebug",
      "body": ["useDebugValue(value, format?);"],
      "description": "useDebugValue Hook Template"
    },
    "useDeferredValue Hook Template": {
      "prefix": "!udef",
      "body": ["const deferredValue = useDeferredValue(value);"],
      "description": "useDeferredValue Hook Template"
    },
    "useTransition Hook Template": {
      "prefix": "!ut",
      "body": ["const [isPending, startTransition] = useTransition();"],
      "description": "useTransition Hook Template"
    },
    "useId Hook Template": {
      "prefix": "!uid",
      "body": ["const id = useId();"],
      "description": "useId Hook Template"
    },
    "useSyncExternalStore Hook Template": {
      "prefix": "!usync",
      "body": [
        "const snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?);"
      ],
      "description": "useSyncExternalStore Hook Template"
    },
    "useInsertionEffect Hook Template": {
      "prefix": "!uins",
      "body": [
        "useInsertionEffect(() => {",
        "  // inject <style> tags here",
        "});"
      ],
      "description": "useInsertionEffect Hook Template"
    }
  }