{
  "useState Hook Template": {
    "prefix": "!us",
    "body": "const [${1:value}, ${2:setValue}] = useState(${3:initialState});",
    "description": "useState Hook Template"
  },

  "useEffect Hook Template": {
    "prefix": "!ue",
    "body": ["useEffect((${3}) => {", "\t${1}", "}, [${2:dependencies}]);"],
    "description": "useEffect Hook Template"
  },

  "useContext Hook Template": {
    "prefix": "!uc",
    "body": "const ${1:value} = useContext(${2:yourContext});",
    "description": "useContext Hook Template"
  },

  "useReducer Hook Template": {
    "prefix": "!ur",
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialArg}, init?);",
    "description": "useReducer Hook Template"
  },

  "useCallback Hook Template": {
    "prefix": "!ucall",
    "body": [
      "const ${1:memoizedCallback} = useCallback(",
      "\t() => {",
      "\t\t${2}",
      "\t}, [${3}]",
      ");"
    ],
    "description": "useCallback Hook Template"
  },

  "useMemo Hook Template": {
    "prefix": "!um",
    "body": "const ${1:cachedValue} = useMemo(${2:calculateValue}, ${3:dependencies})",
    "description": "useMemo Hook Template"
  },

  "useRef Hook Template": {
    "prefix": "!uref",
    "body": "const ${1:refContainer} = useRef(${2:initialValue});",
    "description": "useRef Hook Template"
  },

  "useImperativeHandle Hook Template": {
    "prefix": "!uimp",
    "body": [
      "useImperativeHandle(${1:ref}, () => {",
      "\treturn {",
      "\t\t${2}",
      "\t};",
      "}, [${3:dependecies}]);"
    ],
    "description": "useImperativeHandle Hook Template"
  },

  "useLayoutEffect Hook Template": {
    "prefix": "!ulay",
    "body": "useLayoutEffect(${1:setup}, dependencies?);",
    "description": "useLayoutEffect Hook Template"
  },

  "useDebugValue Hook Template": {
    "prefix": "!udeb",
    "body": "useDebugValue(${1:value}, format?);",
    "description": "useDebugValue Hook Template"
  },

  "useDeferredValue Hook Template": {
    "prefix": "!udef",
    "body": "const ${1:deferredValue} = useDeferredValue(${2:value});",
    "description": "useDeferredValue Hook Template"
  },

  "useTransition Hook Template": {
    "prefix": "!ut",
    "body": "const [${1:isPending}, ${2:startTransition}] = useTransition();",
    "description": "useTransition Hook Template"
  },

  "useId Hook Template": {
    "prefix": "!uid",
    "body": "const ${1:id} = useId();",
    "description": "useId Hook Template"
  },
  "useSyncExternalStore Hook Template": {
    "prefix": "!usync",
    "body": "const ${1:snapshot} = useSyncExternalStore(${2:subscribe}, ${3:getSnapshot}, getServerSnapshot?);",
    "description": "useSyncExternalStore Hook Template"
  },

  "useInsertionEffect Hook Template": {
    "prefix": "!uins",
    "body": ["useInsertionEffect((${2}) => {", "\t${1:style tags}", "});"],
    "description": "useInsertionEffect Hook Template"
  },

  "import React statement": {
    "prefix": "!impr",
    "body": "import React from 'react';",
    "description": "import React statement"
  },

  "import function statement": {
    "prefix": "!impf",
    "body": "import { ${1} } from '${2}';",
    "description": "import function statement"
  },

  "include file": {
    "prefix": "!inc",
    "body": "import '${1}';",
    "description": "includo file"
  },

  "export default": {
    "prefix": "!exp",
    "body": "export default ${1};",
    "description": "export default"
  },

  "export const": {
    "prefix": "!expc",
    "body": "export const ${1:name} = ${2};",
    "description": "export const"
  },

  "component const template": {
    "prefix": "!cc",
    "body": [
      "import React, { ${3} } from 'react'",
      "",
      "const ${1:componentName} = () => {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${2}",
      "\t\t</div>",
      "\t);",
      "}",
      "",
      "export default ${1:componentName};"
    ],
    "description": "component const class template"
  },

  "component class template": {
    "prefix": "!ccl",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "class ${1:componentName} extends Component {",
      "\trender (",
      "\t\treturn (",
      "\t\t\t<div>",
      "\t\t\t\t${2}",
      "\t\t\t</div>",
      "\t\t);",
      "\t);",
      "}",
      "",
      "export default ${1:componentName};"
    ],
    "description": "component class template"
  },

  "component function template": {
    "prefix": "!cf",
    "body": [
      "import React, { ${4} } from 'react'",
      "",
      "function ${1:componentName}(${3}) {",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t${2}",
      "\t\t</div>",
      "\t);",
      "}",
      "",
      "export default ${1:componentName};"
    ],
    "description": "component function template"
  },
}
